% A script to load in the relevant data from the SpineML output.
%
% This script is designed to load the data generated by experiment 0
% of the Oculomotor SpineML model.
%
% All the data is returned in a structure called model_data.
%
% Usually called something like this:
%
% model_data = load_ocm ('/home/seb/src/SpineML_2_BRAHMS/temp');
%
function model_data = load_sbg (output_base_path)

    isOctave = exist('OCTAVE_VERSION', 'builtin') ~= 0;

    model_log_path = [output_base_path '/log/'];
    model_run_path = [output_base_path '/run/'];
    model_model_path = [output_base_path '/model/'];

    % Load weight maps
    [wm_l, wm_r, wm_u, wm_d, wm_zp, wm_zm] = load_sbgmaps(model_model_path, 0);

    % Load in activation state vars for SpineML/SpineCreator model
    [scd, count] = load_sc_data ([model_log_path 'SC_deep_out_log.bin'], 2500);
    [scd2, count] = load_sc_data ([model_log_path 'SC_deep2_out_log.bin'], 2500);
    [sca, count] = load_sc_data ([model_log_path 'SC_avg_out_log.bin'], 2500);

    % Saccade generator, left
    [opn, count] = load_sc_data ([model_log_path 'OPN_a_log.bin'], 1);
    [llbn_l, count] = load_sc_data ([model_log_path 'LLBN_left_a_log.bin'], 1);
    %[llbn_in, count] = load_sc_data ([model_log_path ...
    %                    'SC_deep_output_to_LLBN_left_Synapse_0_postsynapse_out_log.bin'], 1);
    llbn_in = 0;
    [ebn, count] = load_sc_data ([model_log_path 'EBN_left_a_log.bin'],1);
    [ibn, count] = load_sc_data ([model_log_path 'IBN_left_a_log.bin'], 1);
    [tn, count] = load_sc_data ([model_log_path 'TN_left_a_log.bin'], 1);
    [mn, count] = load_sc_data ([model_log_path 'MN_left_a_log.bin'], 1);

    % Saccade generator, right
    [llbn_r, count] = load_sc_data ([model_log_path 'LLBN_right_a_log.bin'], 1);
    llbn_in_r = 0;
    %[llbn_in_r, count] = load_sc_data ([model_log_path ...
    %                    'SC_deep_output_to_LLBN_right_Synapse_0_postsynapse_out_log.bin'], 1);
    [llbn_u, count] = load_sc_data ([model_log_path 'LLBN_up_a_log.bin'], 1);
    [llbn_d, count] = load_sc_data ([model_log_path 'LLBN_down_a_log.bin'], 1);
    %[llbn_zp, count] = load_sc_data ([model_log_path 'LLBN_zplus_a_log.bin'], 1);
    %[llbn_zm, count] = load_sc_data ([model_log_path 'LLBN_zminus_a_log.bin'], 1);

    [ebn_r, count] = load_sc_data ([model_log_path 'EBN_right_a_log.bin'],1);
    [ibn_r, count] = load_sc_data ([model_log_path 'IBN_right_a_log.bin'], 1);
    [tn_r, count] = load_sc_data ([model_log_path 'TN_right_a_log.bin'], 1);
    [mn_r, count] = load_sc_data ([model_log_path 'MN_right_a_log.bin'], 1);

    scd = reshape (scd, 50, 50, []);
    scd2 = reshape(scd2, 50, 50, []);
    sca = reshape (sca, 50, 50, []);

    % Eye rotations
    SS = csvread ([model_run_path 'saccsim_side.log'], 1 , 0);
    eyeRx = SS(:,8);
    eyeRy = SS(:,9);
    eyeRz = SS(:,10);
    eyeTime = SS(:,1);
    clear SS;
    %eyeRx = 0;
    %eyeRy = 0;
    %eyeRz = 0;
    %eyeTime = 0;

    % Now build up the structure to return.
    keySet = {'scd', 'sca', ...
              'eyeRx', 'eyeRy', 'eyeRz', ...
              'eyeTime', 'opn', 'llbn_l', 'llbn_in', 'ebn', 'tn', 'mn', 'ibn', ...
              'llbn_r', 'llbn_in_r', 'llbn_u', 'llbn_d', ...
              'ebn_r', 'tn_r', 'mn_r', 'ibn_r' ...
              'wm_l', 'wm_r', 'wm_u', 'wm_d', 'wm_zp', 'wm_zm', 'scd2'};
    valueSet = {scd, sca, ...
                eyeRx, eyeRy, eyeRz, eyeTime, opn, llbn_l, llbn_in, ebn, tn, ...
                mn, ibn, llbn_r, llbn_in_r, llbn_u, llbn_d, ebn_r, tn_r, mn_r, ibn_r, ...
                wm_l, wm_r, wm_u, wm_d, wm_zp, wm_zm, scd2};

    model_data = struct();
    for i = 1:numel (keySet)
        model_data.(keySet{i}) = valueSet{i};
    end

end