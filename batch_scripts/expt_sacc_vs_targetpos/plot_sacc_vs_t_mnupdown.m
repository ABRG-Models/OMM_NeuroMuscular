% Load the data generated by sacc_vs_targetpos.sh runs
r = struct();
rr = [];

lumval=1;

% Plot lots of trajectories? If you want that set plottraj to 1
plottraj=0;

colours = {'r','b','g','k','c','m','r--','b--','g--','k--','c--','m--'};
colcount = 1;

for j = [0.8 0.9 1.0 1.1 1.2]
    display(['j:' num2str(j)]);
    globstr = sprintf('results/mnupdown_%.1f/r*.dat', j);
    flist = glob(globstr);
    llen = size(flist)(1);
    for i = [1 : llen]

        rnm = flist{i};
        resdatname = substr(rnm, 22); % strips initial 'results/' string
        resdatname = substr(resdatname, 1, size(resdatname)(2)-4); % Strips '.dat' off
        resdatname = strrep (resdatname, '.', 'p');
        resdatname = strrep (resdatname, '-', 'm');

        load (rnm); % loads struct variable called result
        r = struct_merge (r, result);

        % For expected size of rr, consult sacc_vs_targetpos.m
        sz_2 = size(result.(resdatname))(2);

        if (sz_2 >= 14)
            rr = [rr; result.(resdatname), j];
        end
    end
end

%
% For comparison, plot the results from Model1
%
show_model1 = 0;
if show_model1
    flist = glob(['../expt_sacc_vs_targetpos_M1/results/r*.dat']);
    llen = size(flist)(1);
    for i = [1 : llen]
        rnm = flist{i};
        resdatname = substr(rnm, 38); % strips initial 'results/' string
        resdatname = substr(resdatname, 1, size(resdatname)(2)-4); % Strips '.dat' off
        resdatname = strrep (resdatname, '.', 'p');
        resdatname = strrep (resdatname, '-', 'm');
        load (rnm); % loads struct variable called result
        r = struct_merge (r, result);
        % For expected size of rr, consult sacc_vs_targetpos.m
        sz_2 = size(result.(resdatname))(2);
        if (sz_2 >= 14)
            rr = [rr; result.(resdatname), 0];
        end
    end
end

% The rr array contains these columns:
% thetaX, thetaY, fix_lum, gap_ms, lumval, eyeRxAvg, eyeRyAvg, eyeRzAvg, eyeRxSD, eyeRySD, eyeRzSD, latmean, latsd, dopamine

%
% sort rr on target position value
rr = sortrows(rr,1);

weights = unique(rr(:,15))

% Achieved position (Rot X)
figure(12);
clf;
hold on;
colcount = 1;
legend_str='';
for w = weights'
    rr_1 = [];
    rr_1 = rr(find(rr(:,15)==w),:);
    errorbar (rr_1(:,1),rr_1(:,6),rr_1(:,9), colours{colcount})
    legend_str = [legend_str; 'L: ' num2str(rr_1(1,5)) ' DA: ' num2str(rr_1(1,14)) ' w: ' num2str(w)];
    colcount = colcount + 1;
end
plot ([-15,-6],[-15,-6], 'k--');
if show_model1
    legend_str = [legend_str; 'Perfect linear response'];
end
hold off;
xlabel('Target x');
ylabel('eyeRx');
legend(legend_str);

% Latency
figure(15);
clf;
hold on;
colcount = 1;
legend_str='';
for w = weights'
    rr_1 = [];
    rr_1 = rr(find(rr(:,15)==w),:);
    errorbar (rr_1(:,1),rr_1(:,12),rr_1(:,13), colours{colcount})
    legend_str = [legend_str; 'L: ' num2str(rr_1(1,5)) ' DA: ' num2str(rr_1(1,14)) ' w: ' num2str(w)];
    colcount = colcount + 1;
end
xlabel('Target x');
ylabel('Latency (ms)');
legend(legend_str);

% Output for Veusz
targrot = [rr(:,1),rr(:,6),rr(:,9)];
f = fopen ('results/sacc_eyerx_vs_targ.csv', 'w');
fprintf (f, 'TargX,eyeRx,+-\n');
dlmwrite (f, targrot, '-append');
fclose(f);

latrot = [rr(:,1),rr(:,12),rr(:,13)];
f = fopen ('results/sacc_lat_vs_targ.csv', 'w');
fprintf (f, 'TargX,Latency,+-\n');
dlmwrite (f, latrot, '-append');
fclose(f);
